version: "3.5"

services:
  cadvisor:
    image: google/cadvisor:${CADVISOR_VERSION:-v0.33.0}
    networks:
      - monitoring
    ports:
      - "8123:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run:/var/run:ro
      - /dev/disk/:/dev/disk:ro
      - /:/rootfs:ro
      - /sys:/sys:ro
    command: -logtostderr -docker_only
    # command: -storage_driver="elasticsearch" -alsologtostderr=true -storage_driver_es_host="http://elastic.synker.ovh:9200"
    deploy:
      labels:
      - "traefik.tags=monitoring"
      - "traefik.backend=cadvisor"
      - "traefik.backend.loadbalancer.swarm=true"
      - "traefik.backend.loadbalancer.method=drr"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.frontend.rule=Host:cadvisor.synker.ovh"
      - "traefik.frontend.auth.basic.users=admin:$$apr1$$8Dlf//P1$$aE5beYa7YLUDWZ16D9F6b1"
      - "traefik.docker.network=monitoring"
      - "traefik.port=8080"
      - "traefik.enable=true"
      mode: global
      resources:
        limits:
          cpus: '0.10'
          memory: 128M
        reservations:
          cpus: '0.10'
          memory: 64M

  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER:-v0.17.0}
    networks:
      - monitoring
    ports:
      - '9100:9100'
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    deploy:
      labels:
      - "traefik.tags=monitoring"
      - "traefik.backend=node-exporter"
      - "traefik.backend.loadbalancer.swarm=true"
      - "traefik.backend.loadbalancer.method=drr"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.frontend.rule=Host:nodeexporter.synker.ovh"
      - "traefik.frontend.auth.basic.users=admin:$$apr1$$8Dlf//P1$$aE5beYa7YLUDWZ16D9F6b1"
      - "traefik.docker.network=monitoring"
      - "traefik.port=9100"
      - "traefik.enable=true"
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  unsee:
    image: cloudflare/unsee:${UNSEE_VERSION:-v0.9.2}
    networks:
      - monitoring
    ports:
      - '9094:8080'
    environment:
      - "ALERTMANAGER_URIS=default:http://alertmanager:9093"
    deploy:
      labels:
      - "traefik.tags=monitoring"
      - "traefik.backend=unsee"
      - "traefik.backend.loadbalancer.swarm=true"
      - "traefik.backend.loadbalancer.method=drr"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.frontend.rule=Host:unsee.synker.ovh"
      - "traefik.frontend.auth.basic.users=admin:$$apr1$$8Dlf//P1$$aE5beYa7YLUDWZ16D9F6b1"
      - "traefik.docker.network=monitoring"
      - "traefik.port=8080"
      - "traefik.enable=true"
      mode: replicated
      replicas: 1
      
  alertmanager:
    image: prom/alertmanager:${ALERTMANAGER_VERSION:-v0.15.3}
    networks:
      - monitoring
    ports:
      - '9093:9093'
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://alert.synker.ovh'
    configs:
      - source: alertmanager_config
        target: /etc/alertmanager/alertmanager.yml
    volumes:
      - alertmanager_data:/alertmanager
    healthcheck:
      test: "/bin/wget -q -Y off http://localhost:9093/metrics -O /dev/null > /dev/null 2>&1"
      interval: 25s
      timeout: 3s
      start_period: 30s
    deploy:
      labels:
      - "traefik.tags=monitoring"
      - "traefik.backend=alertmanager"
      - "traefik.backend.loadbalancer.swarm=true"
      - "traefik.backend.loadbalancer.method=drr"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.frontend.rule=Host:alert.synker.ovh"
      - "traefik.frontend.auth.basic.users=admin:$$apr1$$8Dlf//P1$$aE5beYa7YLUDWZ16D9F6b1"
      - "traefik.docker.network=monitoring"
      - "traefik.port=9093"
      - "traefik.enable=true"
      mode: replicated
      replicas: 1
      placement:
        constraints:
        - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  prometheus:
    image: prom/prometheus:${PROM_VERSION:-v2.9.1}
    ports:
      - '9090:9090'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=72h'
      - '--web.external-url=https://prometheus.synker.ovh'
    volumes:
      - prom_data:/prometheus/:rw
      - prom_config:/etc/prometheus/
    depends_on:
      - cadvisor
      - node-exporter
      - unsee
    deploy:
      labels:
      - "traefik.tags=monitoring"
      - "traefik.backend=prometheus"
      - "traefik.backend.loadbalancer.swarm=true"
      - "traefik.backend.loadbalancer.method=drr"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.frontend.rule=Host:prometheus.synker.ovh"
      - "traefik.frontend.auth.basic.users=admin:$$apr1$$8Dlf//P1$$aE5beYa7YLUDWZ16D9F6b1"
      - "traefik.docker.network=monitoring"
      - "traefik.port=9090"
      - "traefik.enable=true"
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 2m
        window: 120s
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-6.1.4}
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_log:/var/log/grafana
    ports:
      - "3123:3000"
    secrets:
      - generic_password
      - sendgrid_api_key
    environment:
      - GF_SERVER_ROOT_URL=https://grafana.synker.ovh
      - GF_SERVER_DOMAIN=grafana.synker.ovh
      - GF_SECURITY_ADMIN_PASSWORD=/run/secrets/generic_password
      - GF_AUTH_BASIC_ENABLED=false
      - "GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource"
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.sendgrid.com:587
      - GF_SMTP_USER=heni.fazzani@gmail.com
      - GF_SMTP_PASSWORD=/run/secrets/sendgrid_api_key
      - GF_SMTP_FROM_ADDRESS=heni.fazzani@gmail.com
    networks:
      - monitoring
    depends_on:
      - prometheus
    configs:
      - source: grafana_dashboards_containers
        target: /etc/grafana/dashboards/containers.json
      - source: grafana_dashboards_nodes
        target: /etc/grafana/dashboards/nodes.json
      - source: grafana_dashboards_swarmprom-nodes-dash
        target: /etc/grafana/dashboards/swarmprom-nodes-dash.json
      - source: grafana_dashboards_swarmprom-services-dash
        target: /etc/grafana/dashboards/swarmprom-services-dash.json
      - source: grafana_dashboards_prometheus-2-stats
        target: /etc/grafana/dashboards/prometheus-2-stats.json
      - source: grafana_provisioning_dashboards
        target: /etc/grafana/provisioning/dashboards/dashboards.yml
      - source: grafana_provisioning_datasources1
        target: /etc/grafana/provisioning/datasources/prometheus.yaml
      - source: grafana_provisioning_notifiers1
        target: /etc/grafana/provisioning/notifiers/notifiers.yaml
    deploy:
      labels:
      - "traefik.tags=monitoring"
      - "traefik.backend=grafana"
      - "traefik.backend.loadbalancer.swarm=true"
      - "traefik.backend.loadbalancer.method=drr"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.frontend.rule=Host:grafana.synker.ovh"
      - "traefik.frontend.auth.basic.users=admin:$$apr1$$8Dlf//P1$$aE5beYa7YLUDWZ16D9F6b1"
      - "traefik.docker.network=monitoring"
      - "traefik.port=3000"
      - "traefik.enable=true"
      replicas: 1
      placement:
        constraints:
          - node.labels.provider == ovh
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 2m
        window: 120s

volumes:
  grafana_data:
    driver_opts:
      type: "nfs"
      o: "addr=151.80.235.155,nolock,soft,rw"
      device: ":/mnt/nfs/grafana/data"
  grafana_log:
    driver_opts:
      type: "nfs"
      o: "addr=151.80.235.155,nolock,soft,rw"
      device: ":/mnt/nfs/grafana/log"
  
  prom_data:
    driver_opts:
      type: "nfs"
      o: "addr=151.80.235.155,nolock,soft,rw"
      device: ":/mnt/nfs/prometheus/data"
  prom_config:
    driver_opts:
      type: "nfs"
      o: "addr=151.80.235.155,nolock,soft,rw"
      device: ":/mnt/nfs/prometheus/config"

  alertmanager_data:
    driver_opts:
      type: "nfs"
      o: "addr=151.80.235.155,nolock,soft,rw"
      device: ":/mnt/nfs/alertmanager/data"

configs:
  grafana_provisioning_notifiers1:
    file: ./monitoring/grafana/notifiers/notifiers.yml
  grafana_provisioning_datasources1:
    file: ./monitoring/grafana/datasources/prometheus.yml
  grafana_provisioning_dashboards:
    file: ./monitoring/grafana/swarmprom_dashboards.yml
  grafana_dashboards_containers:
    file: ./monitoring/grafana/dashboards/containers.json
  grafana_dashboards_nodes:
    file: ./monitoring/grafana/dashboards/nodes.json
  grafana_dashboards_swarmprom-nodes-dash:
    file: ./monitoring/grafana/dashboards/swarmprom-nodes-dash.json
  grafana_dashboards_prometheus-2-stats:
    file: ./monitoring/grafana/dashboards/prometheus-2-stats.json
  grafana_dashboards_swarmprom-services-dash:
    file: ./monitoring/grafana/dashboards/swarmprom-services-dash.json

  alertmanager_config:
    file: /mnt/nfs/alertmanager/config/alertmanager.yml

networks:
  monitoring:
    external: true

secrets:
  generic_password:
    file: generic_password.txt
  slack_api_url:
    file: SLACK_API_URL.txt
  sendgrid_api_key:
    file: SENDGRID_API_KEY.txt