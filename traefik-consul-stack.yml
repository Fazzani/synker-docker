version: "3.4"

services:
  consul:
    image: consul:${CONSUL_VERSION:-1.0.6}
    command: agent -server -bootstrap-expect=1 -ui -disable-host-node-id 
    volumes:
      - consul_data:/consul/data
    ports:
      - "8500:8500"
      - "53:53/udp"
    environment:
      - 'CONSUL_LOCAL_CONFIG={"skip_leave_on_interrupt": true, "server":true, "enable_debug":true, "disable_update_check": true}'
      - CONSUL_CLIENT_INTERFACE=eth0
      - CONSUL_BIND_INTERFACE=eth0
    deploy:
      labels:
      - "traefik.backend=consul"
      - "traefik.backend.loadbalancer.swarm=true"
      - "traefik.backend.loadbalancer.method=drr"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.frontend.rule=Host:consul.synker.ovh"
      - "traefik.docker.network=ntw_front"
      - "traefik.port=8500"
      - "traefik.enable=true"
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
    networks:
      - ntw_front

  traefik_init:
    image: traefik:${TRAEFIK_VERSION:-latest}
    command: 
      - "storeconfig"
      # - "--api"
     # - "--debug=true"
      - "--logLevel=WARN"
      - "--web"
      - "--web.address=:8080"
      - --web.readonly
      - --checknewversion=true
      - --insecureskipverify=true
      - --web.statistics
      - "--entrypoints=Name:http Address::80 ProxyProtocol:true Compress:true"
      - "--entrypoints=Name:https Address::443 TLS Compress:true ProxyProtocol:true"
      - "--defaultentrypoints=http,https"
      - "--acme"
      - "--acme.domains=www.synker.ovh,synker.ovh,api.synker.ovh,visu.synker.ovh,kibana.synker.ovh,elastic.synker.ovh,elasticsearch.synker.ovh,rabbitmq.synker.ovh,consul.synker.ovh"
      - "--acme.storage=traefik/acme/account"
      - "--acme.entryPoint=https"
      - "--acme.httpChallenge.entryPoint=http"
      - "--acme.OnHostRule=true"
      - "--acme.onDemand=false"
      - "--acme.email=support@synker.ovh"
      - "--acme.caServer=https://acme-staging.api.letsencrypt.org/directory"
      - "--docker"
      - "--docker.swarmmode"
      - "--docker.domain=docker.localhost"
      - "--docker.watch"
      - "--docker.exposedbydefault=false"
      - "--consul"
      - "--consul.endpoint=consul.synker.ovh:8500"
      - "--consul.prefix=traefik"
      #- --consulcatalog=true
      #- --consulcatalog.endpoint=consul.synker.ovh:8500
      # - --consulcatalog.constraints="tag==public
    networks:
      - ntw_front
    deploy:
      restart_policy:
        condition: on-failure
        delay: 30s
        window: 120s
    depends_on:
      - consul

  traefik:
    image: traefik:${TRAEFIK_VERSION:-latest}
    depends_on:
      - traefik_init
      - consul
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - target: 8080
        published: 8080
        mode: host
    networks:
      - ntw_front
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    command: --consul --consul.endpoint=consul.synker.ovh:8500
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 10s
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure

  visu:
    image: dockersamples/visualizer:stable
    stop_grace_period: 1m30s
    depends_on:
      - traefik
    ports:
      - "8081:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      labels:
      - "traefik.backend=visu"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.frontend.rule=Host:visu.synker.ovh"
      - "traefik.enable=true"
      - "traefik.port=8080"
      - "traefik.docker.network=ntw_front"
      - "traefik.backend.loadbalancer.swarm=true"
      - "traefik.backend.loadbalancer.method=drr"
      restart_policy:
        condition: on-failure
      placement:
        constraints: 
          - node.role == manager
          - node.labels.size == small
    networks:
      - ntw_front
  
  rabbitmq:
    image: "synker/rabbitmq-autocluster:latest"
    labels:
      - "app=amqp-rabbitmq"
      - "traefik.backend=rabbit1"
      - "traefik.frontend.rule=Host:rabbitmq.synker.ovh"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.enable=true"
      - "traefik.port=15672"
      - "traefik.docker.network=ntw_front"
      - "traefik.backend.loadbalancer.swarm=true"
      - "traefik.backend.loadbalancer.method=drr"
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - ntw_front
    depends_on:
      - traefik_init
      - consul
    environment:
      - AUTOCLUSTER_TYPE=consul
      - AUTOCLUSTER_CLEANUP=true
      - CLEANUP_WARN_ONLY=false
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - CONSUL_SVC=rabbitmq
      - CONSUL_SVC_ADDR_AUTO=true
      - RABBIMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE:-synker-rabbit-cookie}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST:-synker-host}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-synker}
    deploy:
      replicas: 2
      resources:
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 2
        delay: 20s
        failure_action: continue
  # who2:
  #   image: emilevauge/whoami
  #   networks:
  #     - ntw_front
  #   depends_on:
  #     - traefik
  #   deploy:
  #     mode: replicated
  #     replicas: 3
  #     restart_policy:
  #       condition: on-failure
  #       max_attempts: 5
  #     resources:
  #       limits:
  #         cpus: '0.20'
  #         memory: 9M
  #       reservations:
  #         cpus: '0.05'
  #         memory: 9M
  #     labels:
  #     - traefik.backend=who2
  #     - "traefik.frontend.rule=PathPrefixStrip:/who2"
  #     - "traefik.frontend.entryPoints=http,https"
  #     - traefik.port=80
  #     - traefik.enable=true
  #     - traefik.passHostHeader=true
  #     - traefik.docker.network=ntw_front
  #     - traefik.backend.loadbalancer.swarm=true
  #     - traefik.backend.loadbalancer.method=drr

networks:
  ingress_net_backend:
    driver: overlay
    external: true
  ntw_front:
    driver: overlay
    external: true

volumes:
  consul_data:
    driver_opts:
      type: "nfs"
      o: "nolock,soft,rw,addr=151.80.235.155"
      device: ":/mnt/nfs/consul/data"