version: "3.4"

services:

  traefik:
    image: traefik:${TRAEFIK_VERSION:-1.7-alpine}
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    networks:
      - ntw_front
      - monitoring
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik_log:/log/traefik
    command: --consul --consul.watch --consul.endpoint=consul.synker.ovh:8500 --consul.prefix=traefik
    environment:
      - OVH_ENDPOINT=${OVH_ENDPOINT:-ovh-eu}
      - OVH_APPLICATION_KEY=${OVH_APPLICATION_KEY:-jEncYct1dwXs3Muq}
      - OVH_APPLICATION_SECRET=${OVH_APPLICATION_SECRET:-MvW4JHaARs5IoLxvajIQ6L2cMkh7gqgm}
      - OVH_CONSUMER_KEY=${OVH_CONSUMER_KEY:-q9J6pT9IDHUL0YZx1R3aYYwGK3BC07j1}
    deploy:
      labels:
      - "traefik.port=8080"
      - "traefik.tags=monitoring"
      - "traefik.backend.loadbalancer.stickiness=true"
      - "traefik.frontend.auth.basic.users=admin:$$apr1$$8Dlf//P1$$aE5beYa7YLUDWZ16D9F6b1"
      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.rule=Host:traefik.synker.ovh"
      - "traefik.docker.network=ntw_front"
      - "traefik.enable=true"
      mode: global
      update_config:
        parallelism: 1
        delay: 10s
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure

  visu:
    image: dockersamples/visualizer:stable
    stop_grace_period: 1m30s
    depends_on:
      - traefik
    ports:
      - "8081:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      labels:
      - "traefik.backend=visu"
      - "traefik.tags=monitoring"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.frontend.rule=Host:visu.synker.ovh"
      - "traefik.frontend.auth.basic.users=admin:$$apr1$$8Dlf//P1$$aE5beYa7YLUDWZ16D9F6b1"
      - "traefik.enable=true"
      - "traefik.port=8080"
      - "traefik.docker.network=ntw_front"
      - "traefik.backend.loadbalancer.swarm=true"
      - "traefik.backend.loadbalancer.method=drr"
      restart_policy:
        condition: on-failure
      placement:
        constraints: 
          - node.role == manager
          - node.labels.size == small
    networks:
      - ntw_front
  
  rabbitmq:
    image: pivotalrabbitmq/rabbitmq-autocluster:3.7-consul
    ports:
    # map the RabbitMQ standard ports, 5672 is the AMQP port and 15672 is the Management_UI port
      - "5672:5672"
      - "${RABBIT_PORT:-15672}:15672"
    volumes:
    #   - rabbit_database:/var/lib/rabbitmq/mnesia
        - /mnt/nfs/rabbitmq/config/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
        - /mnt/nfs/rabbitmq/config/definitions.json:/etc/rabbitmq/definitions.json
    # configs:
    #   - source: rabbitmq_config_v5
    #     target: /etc/rabbitmq/rabbitmq.config
    #     mode: 0444
    environment:
      - TCP_PORTS=${RABBIT_PORT:-15672}, 5672
      - AUTOCLUSTER_TYPE=consul
      - AUTOCLUSTER_CLEANUP=true
      - AUTOCLUSTER_DELAY=60
      - CLEANUP_WARN_ONLY=false
      - CONSUL_HOST=consul.synker.ovh
      - CONSUL_PORT=8500
      - CONSUL_SVC=rabbitmq
      - CONSUL_SVC_ADDR_AUTO=true
      - CONSUL_DEREGISTER_AFTER=60
      - "RABBIMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE:-synker-rabbit-cookie}"
      - "RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST:-synker-host}"
      - "RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-admin}"
      - "RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-synker}"
      - "RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq"
    deploy:
      replicas: 2
      labels:
      - "app=amqp-rabbitmq"
      - "traefik.backend=rabbitmq"
      - "traefik.frontend.rule=Host:rabbitmq.synker.ovh"
      - "traefik.frontend.entryPoints=http,https"
      - "traefik.enable=true"
      - "traefik.port=${RABBIT_PORT:-15672}"
      - "traefik.docker.network=ntw_front"
      - "traefik.backend.loadbalancer.swarm=true"
      - "traefik.backend.loadbalancer.method=drr"
      resources:
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 60s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        order: start-first
      # placement:
      #   constraints: 
      #     - node.role == manager
      #     - node.labels.size == small
    networks:
      - ntw_front
  # who2:
  #   image: emilevauge/whoami
  #   networks:
  #     - ntw_front
  #   depends_on:
  #     - traefik
  #   deploy:
  #     mode: replicated
  #     replicas: 3
  #     restart_policy:
  #       condition: on-failure
  #       max_attempts: 5
  #     resources:
  #       limits:
  #         cpus: '0.20'
  #         memory: 9M
  #       reservations:
  #         cpus: '0.05'
  #         memory: 9M
  #     labels:
  #     - traefik.backend=who2
  #     - "traefik.frontend.rule=PathPrefixStrip:/who2"
  #     - "traefik.frontend.entryPoints=http,https"
  #     - traefik.port=80
  #     - traefik.enable=true
  #     - traefik.passHostHeader=true
  #     - traefik.docker.network=ntw_front
  #     - traefik.backend.loadbalancer.swarm=true
  #     - traefik.backend.loadbalancer.method=drr

networks:
  ingress_net_backend:
    driver: overlay
    external: true
  ntw_front:
    driver: overlay
    external: true
  monitoring:
    driver: overlay
    external: true

volumes:
  # rabbit_database:
  #   driver_opts:
  #     type: "nfs"
  #     o: "nolock,soft,rw,addr=151.80.235.155"
  #     device: ":/mnt/nfs/rabbitmq/data/mnesia"
  traefik_log:
    driver_opts:
      type: "nfs"
      o: "nolock,soft,rw,addr=151.80.235.155"
      device: ":/mnt/nfs/traefik/log"

# configs:
#   rabbitmq_config_v5:
#     file: /mnt/nfs/rabbitmq/config/rabbitmq.conf